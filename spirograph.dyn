<Workspace Version="0.8.0.950" X="34.1951956177699" Y="79.6846628818207" zoom="0.544907913843699" Name="Home" RunType="Manual" RunPeriod="100" HasRunWithoutCrash="True">
  <NamespaceResolutionMap>
    <ClassMap partialName="Vector" resolvedName="Autodesk.DesignScript.Geometry.Vector" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Plane" resolvedName="Autodesk.DesignScript.Geometry.Plane" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Rectangle" resolvedName="Autodesk.DesignScript.Geometry.Rectangle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Math" resolvedName="DSCore.Math" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <DSIronPythonNode.PythonNode guid="78798a42-e6fb-4f4c-97a1-3b6fb100541e" type="DSIronPythonNode.PythonNode" nickname="Spirograph" x="287.36871836619" y="-47.0255463665406" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="5">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

import sys
sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

import math
import random

PI = 3.14159
out_points = []
R = float(IN[0])
r = float(IN[1])
p = float(IN[2])
step = float(IN[3])
epicycloid = bool(IN[4])


def jitter():
	r = random.random() - 0.5
	return r * 0.00002

def seq(start, stop, step=1):
    n = int(round((stop - start)/step))
    if n &gt; 1:
        return([start + step*i for i in range(n+1)])
    else:
        return([])

def hypocycloidPoint(R, r, p, t):
	a = R - r
	b = r/R * t
	c = (1 - r/R) * t
	x = a * math.cos(b) - p * math.cos(c)
	y = a * math.sin(b) + p * math.sin(c)
	return Point.ByCoordinates(x, y)
	
	
def epicycloidPoint(R, r, p, t):
	a = R + r
	b = r/R * t
	c = (1 + r/R) * t
	x = a * math.cos(b) - p * math.cos(c)
	y = a * math.sin(b) + p * math.sin(c)
	return Point.ByCoordinates(x, y)

def hypocycloidLine(R, r, p, t1, t2):
	return Line.ByStartPointEndPoint(hypocycloidPoint(R, r, p, t1), hypocycloidPoint(R, r, p, t2))


def epicycloidLine(R, r, p, t1, t2):
	return Line.ByStartPointEndPoint(epicycloidPoint(R, r, p, t1), epicycloidPoint(R, r, p, t2))

for t in seq(0 * PI, 39.98 * PI, step):
	#out_points.Add(epicycloidPoint(R, r, p, t) if epicycloid else hypocycloidPoint(R, r, p, t))
	out_points.Add(epicycloidLine(R, r, p, t, t + step) if epicycloid else hypocycloidLine(R, r, p, t, t + step))
	
#Assign your output to the OUT variable
OUT = out_points</Script>
    </DSIronPythonNode.PythonNode>
    <DSCoreNodesUI.Input.DoubleSlider guid="ce4d55e7-5cc5-49ad-9f46-a7ae9e6deeb9" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Outer ring radius" x="-41.6311602238696" y="-47.4297781563021" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>57.98</System.Double>
      <Range min="1" max="500" step="0.01" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="7e844350-4e3a-4a8f-a794-3813d252d06a" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Gear radius" x="-43.0880485826062" y="18.3755740362232" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>72.13</System.Double>
      <Range min="1" max="500" step="0.01" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="ce204e6c-e33e-411d-98d3-e0eb27447c7d" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Pen offset" x="-42.7055084301877" y="81.6449176837263" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>108.92</System.Double>
      <Range min="0" max="250" step="0.01" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="0a494160-87d9-491a-857c-73c25a34e048" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Step size" x="-42.8399340187427" y="143.632149968808" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>0.027</System.Double>
      <Range min="0.001" max="0.2" step="0.001" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.BoolSelector guid="24da7bab-17a9-4b6a-9389-d36c53377414" type="DSCoreNodesUI.BoolSelector" nickname="Epicycloid?" x="287.48813769587" y="146.756474517281" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Boolean>True</System.Boolean>
    </DSCoreNodesUI.BoolSelector>
    <DSIronPythonNode.PythonNode guid="7b786d81-a0e0-4d68-8b2e-e00ef4df1d6a" type="DSIronPythonNode.PythonNode" nickname="Polygonize" x="429.521455490803" y="-47.6296044168546" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

import sys
sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

import math
import random

PI = 3.14159
out_polygons = []
lines = IN[0]
width = float(IN[1])

def getCornersForPoint(pt, normal):
	d = math.pow(math.pow(pt.X, 2) + math.pow(pt.Y, 2), 0.8) * width
	v = normal.Cross(Vector.ByCoordinates(0, 0, 1)).Normalized().Scale(d)
	return [pt.Add(v), pt.Subtract(v)]

for index in range(0, len(lines), 1):
	line = lines[index]
	nextline = lines[index + 1 if index &lt; len(lines) - 1 else len(lines) - 1]
	prevline = lines[index - 1 if index &gt; 0 else 0]
	n1 = Vector.ByTwoPoints(prevline.StartPoint, line.EndPoint)
	n2 = Vector.ByTwoPoints(line.StartPoint, nextline.EndPoint)
	out_polygons.Add(Polygon.ByPoints(getCornersForPoint(line.StartPoint, n1) + [p for p in reversed(getCornersForPoint(line.EndPoint, n2))]))
	#p = getCornersForPoint(line.StartPoint, n1)
	#out_polygons.Add(Line.ByStartPointEndPoint(p[0], p[1]))

#Assign your output to the OUT variable
OUT = out_polygons</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="cad54766-66a5-40c5-8491-ceadcd9c0f04" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="235" y="-138" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="width = 0.0006;&#xA;depth = 4;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="5b3790eb-70f6-4819-9b1d-fc4b8b0acf1d" type="Dynamo.Nodes.DSFunction" nickname="Curve.ExtrudeAsSolid" x="576.231247796391" y="-72.3536571982447" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.ExtrudeAsSolid@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="78798a42-e6fb-4f4c-97a1-3b6fb100541e" start_index="0" end="7b786d81-a0e0-4d68-8b2e-e00ef4df1d6a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ce4d55e7-5cc5-49ad-9f46-a7ae9e6deeb9" start_index="0" end="78798a42-e6fb-4f4c-97a1-3b6fb100541e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e844350-4e3a-4a8f-a794-3813d252d06a" start_index="0" end="78798a42-e6fb-4f4c-97a1-3b6fb100541e" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ce204e6c-e33e-411d-98d3-e0eb27447c7d" start_index="0" end="78798a42-e6fb-4f4c-97a1-3b6fb100541e" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="0a494160-87d9-491a-857c-73c25a34e048" start_index="0" end="78798a42-e6fb-4f4c-97a1-3b6fb100541e" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="24da7bab-17a9-4b6a-9389-d36c53377414" start_index="0" end="78798a42-e6fb-4f4c-97a1-3b6fb100541e" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="7b786d81-a0e0-4d68-8b2e-e00ef4df1d6a" start_index="0" end="5b3790eb-70f6-4819-9b1d-fc4b8b0acf1d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="cad54766-66a5-40c5-8491-ceadcd9c0f04" start_index="0" end="7b786d81-a0e0-4d68-8b2e-e00ef4df1d6a" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="cad54766-66a5-40c5-8491-ceadcd9c0f04" start_index="1" end="5b3790eb-70f6-4819-9b1d-fc4b8b0acf1d" end_index="1" portType="0" />
  </Connectors>
  <Notes />
</Workspace>